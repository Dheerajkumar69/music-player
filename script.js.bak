// Ensure waves are always animating
document.addEventListener('DOMContentLoaded', () => {
    const waves = document.querySelectorAll('.wave1');
    waves.forEach(wave => {
        wave.style.animationPlayState = 'running';
    });
});

// Music Player App - Full Implementation

// Sample track data - in a real app this would come from an API
const tracks = [
    {
        id: 1, 
        title: "Saware",
        artist: "Arijit Singh",
        album: "Phantom",
        duration: 290, // in seconds
        cover: "images/saware.jpg", 
        audio: "audio/saware.mp3"
    },
    {
        id: 2,
        title: "Sanam Teri Kasam",
        artist: "Ankit Tiwari",
        album: "Sanam Teri Kasam",
        duration: 315,
        cover: "images/sanam.jpg",
        audio: "audio/sanam-teri-kasam.mp3"
    },
    {
        id: 3,
        title: "Tere Sang Yaara",
        artist: "Atif Aslam",
        album: "Rustom",
        duration: 278,
        cover: "images/tere-sang.jpg",
        audio: "audio/tere-sang-yaara.mp3"
    },
    {
        id: 4,
        title: "Khairiyat",
        artist: "Arijit Singh",
        album: "Chhichhore",
        duration: 264,
        cover: "images/khairiyat.jpg",
        audio: "audio/khairiyat.mp3"
    },
    {
        id: 5,
        title: "Raabta",
        artist: "Arijit Singh",
        album: "Agent Vinod",
        duration: 230,
        cover: "images/raabta.jpg",
        audio: "audio/raabta.mp3"
    }
];

// Trending and new release albums
const trendingAlbums = [
    { id: 1, title: "After Hours", artist: "The Weeknd", cover: "images/trending1.jpg" },
    { id: 2, title: "Future Nostalgia", artist: "Dua Lipa", cover: "images/trending2.jpg" },
    { id: 3, title: "Chromatica", artist: "Lady Gaga", cover: "images/trending3.jpg" },
    { id: 4, title: "SOUR", artist: "Olivia Rodrigo", cover: "images/trending4.jpg" },
    { id: 5, title: "Planet Her", artist: "Doja Cat", cover: "images/trending5.jpg" }
];

const newReleases = [
    { id: 1, title: "Positions", artist: "Ariana Grande", cover: "images/new1.jpg" },
    { id: 2, title: "Butter", artist: "BTS", cover: "images/new2.jpg" },
    { id: 3, title: "Justice", artist: "Justin Bieber", cover: "images/new3.jpg" },
    { id: 4, title: "Happier Than Ever", artist: "Billie Eilish", cover: "images/new4.jpg" },
    { id: 5, title: "30", artist: "Adele", cover: "images/new5.jpg" }
];

// Main player functionality
document.addEventListener('DOMContentLoaded', () => {
    // Player state
    const playerState = {
        currentTrack: null,
        audioElement: new Audio(),
        isPlaying: false,
        currentTime: 0,
        volume: 0.7,
        isShuffle: false,
        isRepeat: false,
        queue: [...tracks], // Clone the tracks array
        currentTrackIndex: 0,
        // New state properties
        uploadedTracks: [],
        customPlaylists: [],
        likedSongs: [], // Store liked songs
        playHistory: [], // Store listening history
        lastPlayedLimit: 50, // Maximum number of tracks to keep in history
        currentTrackRecorded: false,
    };

    // Cache DOM elements
    const elements = {
        // Player controls
        playBtn: document.querySelector('.player-controls .play-btn'),
        prevBtn: document.querySelector('.player-controls .bi-skip-start-fill'),
        nextBtn: document.querySelector('.player-controls .bi-skip-end-fill'),
        shuffleBtn: document.querySelector('.player-controls .bi-shuffle'),
        repeatBtn: document.querySelector('.player-controls .bi-repeat'),
        
        // Progress and volume
        progressBar: document.querySelector('.progress'),
        progressCircle: document.querySelector('.progress-circle'),
        progressContainer: document.querySelector('.progress-bar'),
        currentTimeEl: document.querySelector('.current-time'),
        totalTimeEl: document.querySelector('.total-time'),
        volumeBar: document.querySelector('.volume'),
        volumeCircle: document.querySelector('.volume-circle'),
        volumeContainer: document.querySelector('.volume-bar'),
        volumeIcon: document.querySelector('.player-right .bi-volume-up'),
        
        // Current track info
        nowPlayingImg: document.querySelector('.now-playing-img'),
        nowPlayingTitle: document.querySelector('.now-playing-info h5'),
        nowPlayingArtist: document.querySelector('.now-playing-info p'),
        heartIcon: document.querySelector('.player-left .bi-heart'),
        
        // Lists
        songItems: document.querySelectorAll('.song-item'),
        tabItems: document.querySelectorAll('.tab'),
        
        // Cards
        trendingCards: document.querySelectorAll('.feed-section:nth-child(1) .card'),
        newReleaseCards: document.querySelectorAll('.feed-section:nth-child(2) .card'),
        cardPlayBtns: document.querySelectorAll('.card-play'),
        
        // Featured album
        featuredPlayBtn: document.querySelector('.featured-album .play-btn'),
        featuredFollowBtn: document.querySelector('.featured-album .follow-btn'),
        
        // Sidebar elements
        menuItems: document.querySelectorAll('.menu-item'),
        sidebarToggle: document.querySelector('.sidebar-toggle'),
        sidebar: document.querySelector('.sidebar'),
        
        // Search
        searchInput: document.querySelector('.search-bar input'),
        
        // Tab navigation
        contentPages: document.querySelectorAll('.page'),
        
        // Upload page elements
        fileUploadInput: document.getElementById('file-upload'),
        uploadArea: document.querySelector('.upload-area'),
        uploadItemsList: document.getElementById('upload-items'),
        
        // Playlist page elements
        playlistNameInput: document.getElementById('playlist-name'),
        playlistDescInput: document.getElementById('playlist-description'),
        playlistCoverInput: document.getElementById('playlist-cover'),
        coverPreview: document.getElementById('cover-preview'),
        createPlaylistBtn: document.getElementById('create-playlist'),
        selectableSongs: document.querySelector('.selectable-songs'),
        selectedSongsList: document.getElementById('selected-songs-list'),
        songSearch: document.getElementById('song-search'),
        playlistsGrid: document.querySelector('.playlists-grid'),
        customPlaylistsList: document.querySelector('.playlist-list'),
        
        // Last played page elements
        historyTimeline: document.querySelector('.history-timeline'),
        emptyHistory: document.getElementById('empty-history'),
        
        // Recommended page elements
        recommendationGroups: document.querySelector('.recommendation-groups'),
        artistRecommendations: document.querySelector('.artist-recommendations'),
        emptyRecommendations: document.getElementById('empty-recommendations'),
        
        // Volume slider
        volumeSlider: document.getElementById('volume-slider'),
    };

    // Storage management utilities
    const storageManager = {
        // Check available storage space
        checkStorageQuota: async function() {
            if (navigator.storage && navigator.storage.estimate) {
                try {
                    const estimate = await navigator.storage.estimate();
                    const usedPercentage = Math.round((estimate.usage / estimate.quota) * 100);
                    
                    if (usedPercentage > 80) {
                        showToast(`Warning: Your browser storage is ${usedPercentage}% full. You may need to remove some items.`, 'warning');
                    }
                    
                    return {
                        usedBytes: estimate.usage,
                        totalBytes: estimate.quota,
                        usedPercentage
                    };
                } catch (e) {
                    console.error('Error checking storage quota:', e);
                    return null;
                }
            }
            return null;
        },
        
        // Clear all stored data
        clearStorage: function() {
            if (confirm('Are you sure you want to clear all locally stored music and playlists? This cannot be undone.')) {
                // Clear localStorage
                localStorage.removeItem('musicPlayerData');
                
                // Clear uploaded tracks and revoke URLs
                playerState.uploadedTracks.forEach(track => {
                    if (track.audio) {
                        URL.revokeObjectURL(track.audio);
                    }
                });
                
                // Reset state
                playerState.uploadedTracks = [];
                playerState.customPlaylists = [];
                
                // Clear UI
                elements.uploadItemsList.innerHTML = '';
                elements.customPlaylistsList.innerHTML = '';
                elements.playlistsGrid.innerHTML = '';
                
                // Update UI
                updateSelectableSongs();
                
                showToast('All locally stored music and playlists have been cleared', 'info');
            }
        },
        
        // Get total stored data size
        getStoredDataSize: function() {
            const data = localStorage.getItem('musicPlayerData');
            if (!data) return 0;
            
            // Approximate size in bytes (2 bytes per character for UTF-16)
            return data.length * 2;
        }
    };

    // Initialize the player
    function initPlayer() {
        // Set initial volume
        playerState.audioElement.volume = playerState.volume;
        elements.volumeBar.style.width = `${playerState.volume * 100}%`;
        elements.volumeCircle.style.left = `${playerState.volume * 100}%`;
        
        // Set up the first track
        loadTrack(0);
        
        // Update total time display
        updateTotalTimeDisplay();
        
        // Add mobile sidebar toggle if it exists
        if (elements.sidebarToggle) {
            elements.sidebarToggle.addEventListener('click', toggleSidebar);
        }
        
        // Set up event listeners for song items
        setupPlaylistItems();
        
        // Set up event listeners for trending and new release cards
        setupCardItems();
    }

    // Load a track by index
    function loadTrack(index) {
        if (index < 0) index = playerState.queue.length - 1;
        if (index >= playerState.queue.length) index = 0;
        
        playerState.currentTrackIndex = index;
        playerState.currentTrack = playerState.queue[index];
        
        // Update the audio source
        playerState.audioElement.src = playerState.currentTrack.audio;
        
        // Update the player UI
        elements.nowPlayingImg.src = playerState.currentTrack.cover;
        elements.nowPlayingTitle.textContent = playerState.currentTrack.title;
        elements.nowPlayingArtist.textContent = playerState.currentTrack.artist;
        
        // Update the total time display
        updateTotalTimeDisplay();
        
        // Highlight the current track in the playlist
        updatePlaylistHighlight();
        
        // Update heart icon to show if the track is liked
        updateHeartIcon();
    }

    // Update heart icon based on whether the current track is liked
    function updateHeartIcon() {
        if (!playerState.currentTrack) return;
        
        // Check if current track is in liked songs
        const isLiked = playerState.likedSongs.some(track => 
            track.id === playerState.currentTrack.id
        );
        
        if (isLiked) {
            elements.heartIcon.classList.remove('bi-heart');
            elements.heartIcon.classList.add('bi-heart-fill');
            elements.heartIcon.style.color = '#e25d5d';
        } else {
            elements.heartIcon.classList.remove('bi-heart-fill');
            elements.heartIcon.classList.add('bi-heart');
            elements.heartIcon.style.color = '';
        }
    }

    // Play or pause the current track
    function togglePlay() {
        if (playerState.isPlaying) {
            playerState.audioElement.pause();
        } else {
            playerState.audioElement.play().catch(e => {
                console.error('Error playing audio:', e);
                showToast('Error playing track', 'error');
            });
            
            // Add to history when manually playing a track (not just on end)
            if (playerState.currentTrack) {
                addToPlayHistory(playerState.currentTrack);
            }
        }
        
        // Toggle play state
        playerState.isPlaying = !playerState.isPlaying;
        
        // Update UI
        elements.playBtn.classList.toggle('bi-play-circle-fill', !playerState.isPlaying);
        elements.playBtn.classList.toggle('bi-pause-circle-fill', playerState.isPlaying);
    }

    // Format time from seconds to MM:SS
    function formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs < 10 ? '0' + secs : secs}`;
    }

    // Update the total time display
    function updateTotalTimeDisplay() {
        if (playerState.currentTrack) {
            elements.totalTimeEl.textContent = formatTime(playerState.currentTrack.duration);
        }
    }

    // Update the current time display and progress bar
    function updateTimeDisplay() {
        const currentTime = playerState.audioElement.currentTime;
        elements.currentTimeEl.textContent = formatTime(currentTime);
        
        const duration = playerState.currentTrack ? playerState.currentTrack.duration : 0;
        const progressPercent = (currentTime / duration) * 100;
        
        elements.progressBar.style.width = `${progressPercent}%`;
        elements.progressCircle.style.left = `${progressPercent}%`;
    }

    // Update which track is highlighted in the playlist
    function updatePlaylistHighlight() {
        elements.songItems.forEach((item, index) => {
            if (index === playerState.currentTrackIndex) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }

    // Play next track
    function playNext() {
        if (playerState.isShuffle) {
            // Play a random track if shuffle is on
            const nextIndex = Math.floor(Math.random() * playerState.queue.length);
            loadTrack(nextIndex);
        } else {
            // Play the next track in order
            loadTrack(playerState.currentTrackIndex + 1);
        }
        
        // Start playing if it wasn't already
        if (!playerState.isPlaying) {
            togglePlay();
        } else {
            playerState.audioElement.play().catch(e => console.error('Error playing next track:', e));
        }
    }

    // Play previous track
    function playPrev() {
        loadTrack(playerState.currentTrackIndex - 1);
        
        // Start playing if it wasn't already
        if (!playerState.isPlaying) {
            togglePlay();
        } else {
            playerState.audioElement.play().catch(e => console.error('Error playing previous track:', e));
        }
    }

    // Toggle shuffle mode
    function toggleShuffle() {
        playerState.isShuffle = !playerState.isShuffle;
        
        if (playerState.isShuffle) {
            elements.shuffleBtn.style.color = 'var(--accent-color)';
        } else {
            elements.shuffleBtn.style.color = '';
        }
    }

    // Toggle repeat mode
    function toggleRepeat() {
        playerState.isRepeat = !playerState.isRepeat;
        
        if (playerState.isRepeat) {
            elements.repeatBtn.style.color = 'var(--accent-color)';
        } else {
            elements.repeatBtn.style.color = '';
        }
    }

    // Set up playlist items click handlers
    function setupPlaylistItems() {
        elements.songItems.forEach((item, index) => {
            item.addEventListener('click', function() {
                // Load and play the clicked track
                loadTrack(index);
                togglePlay();
            });
        });
    }

    // Set up card items click handlers
    function setupCardItems() {
        // Trending cards
        elements.trendingCards.forEach((card, index) => {
            card.addEventListener('click', function() {
                alert(`Playing album: ${trendingAlbums[index].title} by ${trendingAlbums[index].artist}`);
            });
        });
        
        // New release cards
        elements.newReleaseCards.forEach((card, index) => {
            card.addEventListener('click', function() {
                alert(`Playing album: ${newReleases[index].title} by ${newReleases[index].artist}`);
            });
        });
        
        // All card play buttons
        elements.cardPlayBtns.forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.stopPropagation();
                const card = this.closest('.card');
                const cardTitle = card.querySelector('h4').textContent;
                const cardArtist = card.querySelector('p').textContent;
                
                alert(`Playing album: ${cardTitle} by ${cardArtist}`);
            });
        });
    }

    // Toggle mobile sidebar visibility
    function toggleSidebar() {
        elements.sidebar.classList.toggle('show-sidebar');
        document.querySelector('.sidebar-overlay').classList.toggle('show-overlay');
    }

    // Set up event listeners for audio element
    function setupAudioEventListeners() {
        // Update time display while playing
        playerState.audioElement.addEventListener('timeupdate', updateTimeDisplay);
        
        // When track ends
        playerState.audioElement.addEventListener('ended', function() {
            if (playerState.isRepeat) {
                // If repeat is on, play the same track again
                playerState.audioElement.currentTime = 0;
                playerState.audioElement.play();
            } else {
                // Add current track to history before moving to next
                addToPlayHistory(playerState.currentTrack);
                
                // Play the next track
                playNext();
            }
        });
    }

    // Set up event listeners for player controls
    function setupPlayerControls() {
        // Play/Pause button
        elements.playBtn.addEventListener('click', togglePlay);
        
        // Next button
        elements.nextBtn.addEventListener('click', playNext);
        
        // Previous button
        elements.prevBtn.addEventListener('click', playPrev);
        
        // Shuffle button
        elements.shuffleBtn.addEventListener('click', toggleShuffle);
        
        // Repeat button
        elements.repeatBtn.addEventListener('click', toggleRepeat);
        
        // Featured album play button
        if (elements.featuredPlayBtn) {
            elements.featuredPlayBtn.addEventListener('click', function() {
                alert('Playing featured album: The Weeknd - Starboy');
            });
        }
        
        // Featured album follow button
        if (elements.featuredFollowBtn) {
            elements.featuredFollowBtn.addEventListener('click', function() {
                if (this.textContent === 'Follow') {
                    this.textContent = 'Following';
                    this.style.backgroundColor = 'var(--accent-color)';
                    this.style.color = 'var(--background-dark)';
                    this.style.border = 'none';
                } else {
                    this.textContent = 'Follow';
                    this.style.backgroundColor = 'transparent';
                    this.style.color = 'var(--text-white)';
                    this.style.border = '2px solid var(--text-white)';
                }
            });
        }
        
        // Progress bar hover effects
        elements.progressContainer.addEventListener('mouseenter', function(e) {
            if (playerState.currentTrack) {
                const rect = this.getBoundingClientRect();
                const offsetX = e.clientX - rect.left;
                const percentage = offsetX / this.clientWidth * 100;
                elements.progressCircle.style.left = `${percentage}%`;
                elements.progressCircle.style.opacity = '1';
            }
        });
        
        elements.progressContainer.addEventListener('mousemove', function(e) {
            if (playerState.currentTrack) {
                const rect = this.getBoundingClientRect();
                const offsetX = e.clientX - rect.left;
                const percentage = offsetX / this.clientWidth * 100;
                elements.progressCircle.style.left = `${percentage}%`;
            }
        });
        
        elements.progressContainer.addEventListener('mouseleave', function() {
            if (!playerState.isPlaying) {
                elements.progressCircle.style.opacity = '0';
            }
        });
        
        // Progress bar click and drag
        elements.progressContainer.addEventListener('mousedown', function(e) {
            e.preventDefault(); // Prevent text selection during drag
            
            // Start tracking mouse movement for dragging
            const handleDrag = function(e) {
                const width = elements.progressContainer.clientWidth;
                const clickX = Math.min(Math.max(0, e.clientX - elements.progressContainer.getBoundingClientRect().left), width);
                const duration = playerState.currentTrack.duration;
                const percentage = clickX / width;
                
                // Update UI
                elements.progressBar.style.width = `${percentage * 100}%`;
                elements.progressCircle.style.left = `${percentage * 100}%`;
                
                // Update time display
                const newTime = duration * percentage;
                elements.currentTimeEl.textContent = formatTime(newTime);
                
                // Show the progress circle
                elements.progressCircle.style.opacity = '1';
            };
            
            // Handle mouse move
            document.addEventListener('mousemove', handleDrag);
            
            // Handle mouse up - stop dragging and set the position
            document.addEventListener('mouseup', function finalizeSeek(e) {
                document.removeEventListener('mousemove', handleDrag);
                document.removeEventListener('mouseup', finalizeSeek);
                
                const width = elements.progressContainer.clientWidth;
                const clickX = Math.min(Math.max(0, e.clientX - elements.progressContainer.getBoundingClientRect().left), width);
                const duration = playerState.currentTrack.duration;
                
                // Set the new time
                playerState.audioElement.currentTime = (clickX / width) * duration;
                
                // If we're not playing but dragged the slider, show the circle temporarily
                if (!playerState.isPlaying) {
                    elements.progressCircle.style.opacity = '1';
                    setTimeout(() => {
                        elements.progressCircle.style.opacity = '0';
                    }, 1500);
                }
            });
            
            // Call the handler once to update immediately on click
            handleDrag(e);
        });
        
        // Volume bar hover effects
        elements.volumeContainer.addEventListener('mouseenter', function(e) {
            const rect = this.getBoundingClientRect();
            const offsetX = e.clientX - rect.left;
            const percentage = offsetX / this.clientWidth * 100;
            elements.volumeCircle.style.left = `${percentage}%`;
            elements.volumeCircle.style.opacity = '1';
        });
        
        elements.volumeContainer.addEventListener('mousemove', function(e) {
            const rect = this.getBoundingClientRect();
            const offsetX = e.clientX - rect.left;
            const percentage = offsetX / this.clientWidth * 100;
            elements.volumeCircle.style.left = `${percentage}%`;
        });
        
        elements.volumeContainer.addEventListener('mouseleave', function() {
            elements.volumeCircle.style.opacity = '0';
        });
        
        // Volume bar click and drag
        elements.volumeContainer.addEventListener('mousedown', function(e) {
            e.preventDefault(); // Prevent text selection during drag
            
            // Start tracking mouse movement for dragging
            const handleDrag = function(e) {
                const width = elements.volumeContainer.clientWidth;
                const clickX = Math.min(Math.max(0, e.clientX - elements.volumeContainer.getBoundingClientRect().left), width);
                const volumeLevel = clickX / width;
                
                // Update UI
                elements.volumeBar.style.width = `${volumeLevel * 100}%`;
                elements.volumeCircle.style.left = `${volumeLevel * 100}%`;
                
                // Show the volume circle
                elements.volumeCircle.style.opacity = '1';
                
                // Update player state and volume
                playerState.volume = volumeLevel;
                playerState.audioElement.volume = volumeLevel;
                
                // Update volume icon based on level
                updateVolumeIcon(volumeLevel);
            };
            
            // Handle mouse move
            document.addEventListener('mousemove', handleDrag);
            
            // Handle mouse up - stop dragging
            document.addEventListener('mouseup', function finalizeVolume(e) {
                document.removeEventListener('mousemove', handleDrag);
                document.removeEventListener('mouseup', finalizeVolume);
                
                // Keep the circle visible for a moment when done
                setTimeout(() => {
                    if (!elements.volumeContainer.matches(':hover')) {
                        elements.volumeCircle.style.opacity = '0';
                    }
                }, 1000);
            });
            
            // Call the handler once to update immediately on click
            handleDrag(e);
        });
        
        // Volume icon click (mute/unmute)
        elements.volumeIcon.addEventListener('click', function() {
            if (playerState.audioElement.volume > 0) {
                // Store the current volume to restore later
                playerState.lastVolume = playerState.audioElement.volume;
                playerState.audioElement.volume = 0;
                elements.volumeBar.style.width = '0%';
                elements.volumeCircle.style.left = '0%';
                elements.volumeIcon.classList.remove('bi-volume-up', 'bi-volume-down');
                elements.volumeIcon.classList.add('bi-volume-mute');
            } else {
                // Restore the previous volume
                playerState.audioElement.volume = playerState.lastVolume || 0.7;
                playerState.volume = playerState.lastVolume || 0.7;
                elements.volumeBar.style.width = `${playerState.volume * 100}%`;
                elements.volumeCircle.style.left = `${playerState.volume * 100}%`;
                elements.volumeIcon.classList.remove('bi-volume-mute');
                if (playerState.volume < 0.5) {
                    elements.volumeIcon.classList.add('bi-volume-down');
                } else {
                    elements.volumeIcon.classList.add('bi-volume-up');
                }
            }
        });
        
        // Heart icon (favorite)
        elements.heartIcon.addEventListener('click', function() {
            if (!playerState.currentTrack) return;
            
            // Update heart icon UI
            if (this.classList.contains('bi-heart')) {
                this.classList.remove('bi-heart');
                this.classList.add('bi-heart-fill');
                this.style.color = '#e25d5d';
            } else {
                this.classList.remove('bi-heart-fill');
                this.classList.add('bi-heart');
                this.style.color = '';
            }
            
            // Add/remove track from liked songs
            toggleLiked(playerState.currentTrack);
        });
        
        // Tab navigation
        elements.tabItems.forEach((tab, index) => {
            tab.addEventListener('click', function() {
                showTab(index);
            });
        });
        
        // Menu items
        elements.menuItems.forEach((item, index) => {
            item.addEventListener('click', function() {
                // Update active state
                elements.menuItems.forEach(i => i.classList.remove('active'));
                this.classList.add('active');
                
                // Get the menu item text to determine which content to show
                const menuText = this.querySelector('span').textContent.trim();
                console.log(`Sidebar item clicked: ${menuText}`); // Debug
                
                // Use the mapping to find the correct tab to show
                if (window.sidebarToTabMap && window.sidebarToTabMap[menuText] !== undefined) {
                    const tabIndex = window.sidebarToTabMap[menuText];
                    console.log(`Found tab index for ${menuText}: ${tabIndex}`); // Debug
                    
                    if (tabIndex !== -1) {
                        // Directly set active classes on tabs and content pages
                        elements.tabItems.forEach((t, i) => {
                            t.classList.toggle('active', i === tabIndex);
                        });
                        
                        elements.contentPages.forEach((p, i) => {
                            p.classList.toggle('active', i === tabIndex);
                        });
                    }
                } else {
                    console.warn(`No mapping found for sidebar item: ${menuText}`); // Debug
                    
                    // Fallback to old mapping if something went wrong
                    let tabIndex = -1;
                    
                    switch (menuText) {
                        case 'Playlist':
                            tabIndex = 0; // Discover tab
                            break;
                        case 'Last Played':
                            tabIndex = -1; // Unlinked
                            break;
                        case 'Recommended':
                            tabIndex = -1; // Unlinked
                            break;
                        case 'My Uploads':
                            tabIndex = 1; // My Library tab (previously Last Played)
                            break;
                        case 'My Playlists':
                            tabIndex = 2; // Radio tab (previously Recommended)
                            break;
                    }
                    
                    if (tabIndex !== -1) {
                        // Directly set active classes on tabs and content pages
                        elements.tabItems.forEach((t, i) => {
                            t.classList.toggle('active', i === tabIndex);
                        });
                        
                        elements.contentPages.forEach((p, i) => {
                            p.classList.toggle('active', i === tabIndex);
                        });
                    }
                }
                
                // Close sidebar on mobile
                if (window.innerWidth <= 768) {
                    toggleSidebar();
                }
            });
        });
        
        // Helper function to show a specific tab
        function showTab(tabIndex, fromSidebar = false) {
            // Validate the index
            if (tabIndex < 0 || tabIndex >= elements.tabItems.length || 
                tabIndex >= elements.contentPages.length) {
                console.error('Invalid tab index:', tabIndex);
                return;
            }
            
            console.log(`Showing tab: ${tabIndex} (fromSidebar: ${fromSidebar})`); // Debug
            
            // Update tab UI - always update the top tabs to reflect current view
            elements.tabItems.forEach((t, i) => {
                if (i === tabIndex) {
                    t.classList.add('active');
                } else {
                    t.classList.remove('active');
                }
            });
            
            // Update content pages
            elements.contentPages.forEach((p, i) => {
                if (i === tabIndex) {
                    p.classList.add('active');
                } else {
                    p.classList.remove('active');
                }
            });
            
            // Call specific render functions based on which tab is now active
            const lastPlayedIndex = Array.from(elements.contentPages).findIndex(page => page.classList.contains('last-played-page'));
            const recommendedIndex = Array.from(elements.contentPages).findIndex(page => page.classList.contains('recommended-page'));
            
            switch(tabIndex) {
                case lastPlayedIndex: // Last Played tab
                    renderLastPlayed();
                    break;
                case recommendedIndex: // Recommended tab
                    renderRecommendedSongs();
                    break;
                case 1: // My Library tab - show uploaded tracks
                    // We want this tab to show uploaded tracks
                    if (elements.uploadItemsList) {
                        // Refresh the uploads list if needed
                        const uploadItems = playerState.uploadedTracks.map(track => addUploadItem(track, false));
                    }
                    break;
                case 2: // Radio tab - show playlists
                    // We want this tab to show playlists
                    if (typeof renderPlaylists === 'function') {
                        renderPlaylists();
                    }
                    break;
                case 0: // Discover tab
                    // Any discover-specific rendering
                    break;
            }
            
            // Properly map sidebar items to top tabs
            const sidebarToTabMap = {
                'Playlist': tabNames.indexOf('Discover'),
                'Last Played': lastPlayedIndex, // Map to Last Played page
                'Recommended': recommendedIndex, // Map to Recommended page
                'My Uploads': tabNames.indexOf('My Library'), // Link My Uploads in sidebar to My Library tab
                'My Playlists': tabNames.indexOf('Radio') // Link My Playlists in sidebar to Radio tab
            };
            
            // Store tab index mapping for global reference
            window.tabIndices = {
                myLibrary: tabNames.indexOf('My Library'),
                radio: tabNames.indexOf('Radio'),
                upload: tabNames.indexOf('Upload'),
                playlists: tabNames.indexOf('Playlists')
            };
            
            console.log('Sidebar to tab map:', sidebarToTabMap); // Debug
        }
    }

    // Initialize the player
    initPlayer();
});
